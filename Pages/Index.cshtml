@page
@model IndexModel
@{
    ViewData["Title"] = "الصفحة الرئيسية";
}
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@* **** *@

<style>

   
    body {
        min-height: 100vh;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    .content-container {
        flex: 1;
        display: flex; 
        background: url('/icons/najah.jpg') no-repeat center center;
        background-size: 10vw;
        background-position: 50% 5%;
        background-blend-mode: lighten;
    }
    /* General Styles */
    .text-center {
        display: flex;
        flex-direction: column;
        justify-content: flex-start; /* Align items to the top */
        align-items: center;
        padding-top: 70px; /* Add some padding at the top */
        padding-bottom: 80px; /* To create space for the footer */
        height: auto; /* Let the height adjust based on content */
        
    }

    .search-bar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        max-width: 600px;
        min-width: 600px;
        height: 55px;
        border: 1px solid #dcdcdc;
        border-radius: 30px;
        padding: 0 20px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        /* margin-top: 150px;  */
        margin-bottom: 20px;
        gap: 15px;
        transition: box-shadow 0.3s ease;
    }

.search-bar input {
    flex: 1;
    border: none;
    outline: none;
    padding: 10px;
    font-size: 16px;
    background-color: transparent;
    color: #333;
}

.search-bar select {
    border: none;
    outline: none;
    font-size: 14px;
    padding: 8px;
    border-radius: 5px;
    background-color: #fff;
    color: #333;
    cursor: pointer;
}


    .results {
        width: 100%;
        max-width: 600px; /* Consistent width */
        list-style: none;
        padding: 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        background-color: rgba(255, 255, 255, 0.8);
        display: none;
        max-height: 200px;
        overflow-y: auto;
        margin-top: 20px; /* Increased margin-top to keep it spaced */
    }

        .results.show {
            display: block;
        }

        .results li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ddd;
            transition: background-color 0.3s ease;
            
        }

            .results li:last-child {
                border-bottom: none;
            }

            .results li:hover {
                background-color: #f0f0f0;
            }

        .results .search-item {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center;
            gap: 10px;
        }

        .results .btn {
            padding: 6px 12px;
            font-size: 14px;
            border-radius: 5px;
        }

        .results .employee-name {
            font-weight: bold;
            color: #333;
            overflow: hidden;
            color: #A72A3D;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

    .modal-content {
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        background-color: #fff;
        font-size: clamp(14px, 1.5vw, 16px);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #005E66;
        border-bottom: 1px solid #e9ecef;
    }

        .modal-header .close {
            background: #f5f5f5;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 20px;
            color: #555;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            .modal-header .close:hover {
                background-color: #e0e0e0;
                color: #000;
            }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 10px 0;
        color: #005E66;
        font-size: clamp(12px, 1.5vw, 14px);
    }

        .table th, .table td {
            padding: 12px;
            text-align: right;
            border: 1px solid #ddd;
        }

        .table th {
            background-color: #f8f9fa;
            font-weight: bold;
            text-transform: uppercase;
            color: #555;
        }

        .table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .table tr:hover {
            background-color: #e9ecef;
        }

    .important-numbers-container {
        width: 100%;
        max-width: 100%;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        color: #A72A3D;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        margin: 20px auto;
        overflow-y: auto;
        max-height: 400px;
        align-items:right;
    }

    #important-numbers-list {
        display: grid;
        gap: 15px;
        padding: 0;
        margin: 0;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }

        .important-numbers-container h4 {
            text-align: center;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        #important-numbers-list li {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: transform 0.2s ease;
            min-width: 200px;
            overflow: hidden;
        }

            #important-numbers-list li:hover {
                transform: translateY(-2px);
                padding: 15px; /* Same as original */
                margin: 0;
            }

            #important-numbers-list li button {
                margin-left: 10px;
                padding: 5px 10px;
                font-size: 0.9rem;
            }

            #important-numbers-list li:last-child {
                border-bottom: none; /* Remove border from the last item */
            }
.table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
}

.table th, .table td {
    padding: 8px;
    text-align: right;
    border: 1px solid #ddd;
}

.table th {
    background-color: #f8f9fa;
    font-weight: bold;
    text-transform: uppercase;
    color: #555;
}

    .popup-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .popup {
        padding: 15px 20px;
        border-radius: 8px;
        font-size: 16px;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        min-width: 250px;
        max-width: 350px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 0;
        transform: translateX(50px);
        animation: fadeIn 0.4s forwards, fadeOut 0.4s ease-out 4s forwards;
    }

        .popup.success {
            background: #28a745;
        }

        .popup.error {
            background: #dc3545;
        }

        .popup.warning {
            background: #ffc107;
            color: #333;
        }

        .popup.info {
            background: #17a2b8;
        }

        .popup button {
            background: none;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: inherit;
        }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateX(50px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes fadeOut {
        to

    {
        opacity: 0;
        transform: translateX(50px);
    }

    }
/* Responsive Styles */
    @@media (min-width: 768px) {
        #important-numbers-list.force-3-columns {
            grid-template-columns: repeat(3, minmax(200px, 1fr)) !important;
        }
        /* Add explicit column count for different numbers */
        #important-numbers-list.force-4-columns {
            grid-template-columns: repeat(4, minmax(200px, 1fr)) !important;
        }

    }

@@media (max-width: 768px) {
    .search-bar {
        width: 100%;
        min-width: auto;
        padding: 0 10px;
    }

     
    .important-numbers-container {
        max-width: 100%;
    }

        #important-numbers-list {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

            #important-numbers-list.force-2-columns {
                grid-template-columns: repeat(2, 1fr) !important;
            }


        .content-container {
            background-size: 20vw;
        }
        
}

@@media (max-width: 480px) {
    .search-bar {
        flex-direction: column;
        height: auto;
        padding: 10px;
        border-radius: 10px;
        gap: 8px;
    }

        .content-container {
            background-size: 15vw;
        }


        .search-bar select, .search-bar input {
        width: 100%;
    }




        .important-numbers-container {
            width: 100%;
            padding: 15px;
        }

        #important-numbers-list {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
        }

            #important-numbers-list li {
                padding: 12px;
                flex-direction: column;
                align-items: flex-start;
            }

                #important-numbers-list li button {
                    margin-top: 8px;
                    margin-left: 0;
                    width: 100%;
                }
}

</style>

<div class="text-center content-container">
    
    <p style=" text-align: center; direction:rtl; font-size: 18px; color: #005E66; max-width: 600px; margin-top: 100px;">
        مرحبًا بكم في دليل الهاتف الرسمي لجامعة النجاح الوطنية، حيث يمكنكم العثور على معلومات الاتصال الخاصة بالموظفين والأقسام بسهولة.
        نحرص على أن تكون البيانات محدثة دائمًا لضمان تواصل فعال داخل الجامعة.
    </p>

    <div class="search-bar" style="display: flex; align-items: center; width: 100%; overflow: hidden;">
        <select id="department-select" style="margin-right: 10px; padding: 10px; color: #005E66;">
            <option value="">كل الاقسام</option>
            @foreach (var department in Model.Departments)
            {
                <option value="@department">@department</option>
            }
        </select>
        <input id="search-input" type="text" Dir="rtl" placeholder="ادخل اسم الموظف ..." style="color: #A72A3D;flex: 1; padding: 10px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" />
    </div>


    <ul id="results" class="results"></ul>

    <div class="important-numbers-container">
        <h4>أهم الأرقام</h4>
        <ul id="important-numbers-list" style="color: #A72A3D;"></ul>
    </div>
</div>



<div class="modal" id="employeeModal" tabindex="-1" role="dialog" aria-labelledby="employeeModalLabel" aria-hidden="true">
    @Html.AntiForgeryToken()

    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" aria-label="Close" onclick="$('#employeeModal').modal('hide');">
                    &times;
                </button>
                <h5 class="modal-title" id="employeeModalLabel" dir="rtl">معلومات الموظف</h5>
            </div>
            <div class="modal-body">
                <table id="employee-info" class="table">
                    <!-- Employee details will be dynamically inserted here -->
                </table>
            </div>
        </div>
    </div>
</div>
<div class="popup-container" id="popup-container"></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
        let currentEmployee = null;
        var userHasEditMainPageClaim = @Json.Serialize(User.HasClaim("EditMainPage", "true"));
        console.log("can edit:", userHasEditMainPageClaim);
        document.getElementById("search-input").addEventListener("input", function () {
        const query = this.value.trim();
        const department = document.getElementById("department-select").value;
        const resultsContainer = document.getElementById("results");

        resultsContainer.innerHTML = "";
        if (query.length === 0 && department === "") {
            resultsContainer.classList.remove("show");
            return;
        }

        fetch(`/Index?handler=Search&query=${encodeURIComponent(query)}&department=${encodeURIComponent(department)}`)
            .then(response => response.json())
            .then(data => {
                if (Array.isArray(data) && data.length > 0) {
                    resultsContainer.classList.add("show");
                    data.forEach(employee => {
                        const li = document.createElement("li");

                        const nameDiv = document.createElement("div");
                        nameDiv.textContent = employee.name;
                        nameDiv.className = "employee-name";

                        const button = document.createElement("button");
                        button.textContent = "عرض";
                        button.className = "btn btn-info";
                                button.style.backgroundColor = "#005E66";
                                button.style.borderColor = "#005E66";
                        button.style.color = "white";
                        button.onclick = function () {
                            showEmployeeInfo(employee.id, true);
                        };

                        const containerDiv = document.createElement("div");
                        containerDiv.className = "search-item";

                        containerDiv.appendChild(button);
                        containerDiv.appendChild(nameDiv);

                        li.appendChild(containerDiv);
                        resultsContainer.appendChild(li);
                    });
                } else {
                    resultsContainer.classList.remove("show");
                }
            })
            .catch(error => console.error("Error fetching search results:", error));
    });


    document.getElementById("department-select").addEventListener("change", function() {
        const event = new Event('input');
        document.getElementById("search-input").dispatchEvent(event);

    });

    function showEmployeeInfo(employeeId, displayAddToImportantContactButton) {
                        
         console.log("can edit in show:", userHasEditMainPageClaim);
        console.log(employeeId);
        fetch(`/Index?handler=EmployeeDetails&id=${employeeId}`)
            .then(response => response.json())
            .then(jsonData => {
                if (jsonData) {
                    let infoContent = '';
                    const userEmail = jsonData.email; 
                    const currentEmployee = jsonData;
                    for (let key in jsonData) {
                        if (jsonData[key] !== null && jsonData[key] !== '') {
                            let arabicKey = translateToArabic(key);
                            infoContent += `<tr><td dir="rtl" class='text-left'>${jsonData[key]}</td><td dir="rtl" class='text-right'><strong>${arabicKey}</strong></td></tr>`;
                        }
                    }

                    if (userEmail) {
                        infoContent += `
                        <tr>
                                <td colspan="2" dir="rtl" style="text-align: center;">
                                    <p style="text-align: center; direction:rtl; font-size: 18px; max-width: 600px; color:#A72A3D;">
                                    إذا كنت ترغب في تحديث معلوماتك، اضغط على هذا الزر وسيتم إرسال بريد إلكتروني إلى العنوان المسجل يحتوي على رابط لتحديث بياناتك.
                                </p>

                                    <button class="btn btn-primary mt-3"
                                                            style="width: 100%; max-width: 250px; background-color:#005E66; border-color:#005E66;"
                                            onclick="handleUpdateRequest('${userEmail}')">
                                        طلب تحديث المعلومات
                                    </button>
                                </td>
                            </tr>`;
                    }

                                 if (userHasEditMainPageClaim  && currentEmployee && displayAddToImportantContactButton) {
                            infoContent += `<tr>
                                <td colspan="2" dir="rtl" style="text-align: center;">
                                    <button class="btn btn-warning mt-3"
                                            style="width: 100%; max-width: 250px;"
                                            onclick="addToImportantNumbers('${employeeId}', '${currentEmployee.name.replace(/'/g, "\\'")}')">
                                        أضف إلى قائمة الأرقام المهمة
                                    </button>
                                </td>
                            </tr>`;
                        }

                    document.getElementById('employee-info').innerHTML = infoContent;
                    $('#employeeModal').modal('show');
                } else {
                    showPopup('لا توجد تفاصيل لهذا الموظف.', 'warning');
                    }
            })
            .catch(error => {
                console.error('خطأ في جلب تفاصيل الموظف:', error);
                showPopup('حدث خطأ أثناء جلب تفاصيل الموظف.', 'error');
            });
    }

    function handleUpdateRequest(userEmail) {
        if (!userEmail) {
            showPopup('البريد الإلكتروني غير متوفر لطلب التحديث.', 'info');
            return;
        }

        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch('/Index?handler=SendUpdateRequest', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ email: userEmail })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showPopup('تم إرسال طلب التحديث إلى بريدك الإلكتروني.', 'success');
            } else {
                showPopup('حدث خطأ أثناء إرسال طلب التحديث: ' + data.error, 'error');

            }
        })
        .catch(error => {
            console.error('Error:', error);
            showPopup('حدث خطأ غير متوقع أثناء الإرسال', 'error');
        });
    }

    let importantNumbers = [];

    async function addToImportantNumbers(employeeId, employeeName) {

        if (importantNumbers.some(item => item.id === employeeId)) {
            showPopup("الموظف مضاف بالفعل إلى القائمة.", 'warning');
            return;
        }
        try {
            const response = await fetch('?handler=AddToImportantNumbers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(employeeId) // Send raw integer
            });

            const result = await response.json();

            if (!response.ok) {
                 showPopup(result.message || "حدث خطأ أثناء الإضافة", 'error');
                return;
            }
            console.log("Result: ", result);

            if(!result.success){
                 showPopup("الموظف مضاف بالفعل إلى القائمة.", 'warning');
                return;
            }
            importantNumbers.push({ id: employeeId, name: employeeName });

            updateImportantNumbersUI();
         

        } catch (error) {
            console.error('Error:', error);
             showPopup("فشل في الاتصال بالخادم", 'error');
        }
    }




    async function removeFromImportantNumbers(employeeId) {
        try {
             console.log("Delete/.....");
            const response = await fetch('?handler=RemoveFromImportantNumbers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(employeeId) // Send raw integer
            });

            const result = await response.json();
                 console.log("Delete/.....");
            if (!response.ok) {
                showPopup(result.message || "حدث خطأ أثناء الحذف", 'error');
                return;
            }

            // Only update UI after successful server response
            console.log("Delete/.....");
            console.log(employeeId);
            importantNumbers = importantNumbers.filter(item => item.id !== Number(employeeId));
            importantNumbers = importantNumbers.filter(item => item.id !== employeeId);
            console.log(importantNumbers);
            updateImportantNumbersUI();

        } catch (error) {
            console.error('Error:', error);
            showPopup("فشل في الاتصال بالخادم", 'error');
        }
    }

    // Load important numbers when page loads
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            const response = await fetch('?handler=ImportantNumbers');
        
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const importantNumbersData = await response.json();
            importantNumbers = importantNumbersData;
            updateImportantNumbersUI();
        
        } catch (error) {
            console.error('Error loading important numbers:', error);
            showPopup("فشل في تحميل قائمة الأرقام المهمة", 'error');
        }
});

    function updateImportantNumbersUI() {
        console.log("in update");
        const list = document.getElementById("important-numbers-list");
        list.innerHTML = "";

        importantNumbers.forEach(employee => {
            const li = document.createElement("li");
            li.className = "d-flex justify-content-between align-items-center mb-2";

                            let buttons = `<button class="btn btn-sm" style="background-color: #005E66; border-color: #005E66;color:white" onclick="showEmployeeInfo('${employee.id}', false)">عرض</button>`;

            // Only show the "حذف" button if the user has the claim
            if (userHasEditMainPageClaim) {
                buttons = `
                    <button class="btn btn-sm btn-danger" onclick="removeFromImportantNumbers('${employee.id}')">حذف</button>
                    ` + buttons;
            }

            li.innerHTML = `
                <div>${buttons}</div>
                <span>${employee.name}</span>
            `;

            list.appendChild(li);
        });
        const itemCount = importantNumbers.length;
        const isDesktop = window.matchMedia('(min-width: 768px)').matches;

            list.classList.remove('force-2-columns', 'force-3-columns' , 'force-4-columns');

        if (isDesktop) {
            if (itemCount === 4) {
                list.classList.add('force-2-columns');
            } else if (itemCount === 3) {
                list.classList.add('force-3-columns');
            } else if (itemCount <= 7 && itemCount > 0) {
                list.classList.add('force-3-columns');
            } else if (itemCount > 7) {
                list.classList.add('force-4-columns');
            }
        } else if (itemCount === 4) {
            list.classList.add('force-2-columns');
        }
            list.classList.remove('force-3-columns');

        if (isDesktop && itemCount <= 7 && itemCount > 0) {
            list.classList.add('force-3-columns');
        }
    }

    function showPopup(message, type = 'success', duration = 4000) {
            const popupContainer = document.getElementById('popup-container');

            const popup = document.createElement('div');
            popup.classList.add('popup', type);
            popup.innerHTML = `
                <span>${message}</span>
                <button onclick="this.parentElement.remove()">✖</button>
            `;

            popupContainer.appendChild(popup);

            setTimeout(() => {
                popup.remove();
            }, duration);
        }


    function translateToArabic(key) {
        const translations = {
            "name": "الاسم",
            "email": "البريد الإلكتروني",
            "localPhone": "الهاتف المحلي",
            "department": "القسم",
            "position": "الوظيفة",
            "officeLocation": "موقع المكتب",
            "otherNumbers": "أرقام أخرى",
            "phoneNumber":"رقم الجوال",
            "notes":"ملاحظات"

        };
        return translations[key] || key;
    }
</script>